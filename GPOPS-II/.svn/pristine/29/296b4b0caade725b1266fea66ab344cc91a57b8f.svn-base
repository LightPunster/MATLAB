function [hesoutput,grdoutput] = gpopsAdigatorEndpHes(input,probinfo)
% ADiGator wrapper for Endpoint Hessian Values
% Copyright 2011-2014 Matthew J. Weinstein and Anil V. Rao
% Distributed under the GNU General Public License version 3.0

% ----------------------------------------------------------------------- %
%                            Restructure Inputs                           %
% ----------------------------------------------------------------------- %
numphase = length(input.phase);
for phasecount = 1:numphase
  % State Endpoints
  if isfield(input.phase(phasecount),'initialstate');
    x0 = input.phase(phasecount).initialstate;
    xf = input.phase(phasecount).finalstate;
    input.phase(phasecount).initialstate = struct('f',x0,'dv',ones(length(x0),1));
    input.phase(phasecount).finalstate   = struct('f',xf,'dv',ones(length(xf),1));
  end
  % Time Endpoints
  t0 = input.phase(phasecount).initialtime;
  tf = input.phase(phasecount).finaltime;
  input.phase(phasecount).initialtime    = struct('f',t0,'dv',1);
  input.phase(phasecount).finaltime      = struct('f',tf,'dv',1);
  % Integral
  if isfield(input.phase(phasecount),'integral')
    q = input.phase(phasecount).integral;
    input.phase(phasecount).integral     = struct('f',q, 'dv',ones(length(q),1));
  end
end

% Parameter
if isfield(input,'parameter')
  par = input.parameter;
  input.parameter = struct('f',par,'dv',ones(length(par),1));
end

% ----------------------------------------------------------------------- %
%                          Call Derivative File                           %
% ----------------------------------------------------------------------- %
output = feval(probinfo.adigator.endphes,input);

% ----------------------------------------------------------------------- %
%                            Restructure Outputs                          %
% ----------------------------------------------------------------------- %
grdflag = false;
if nargout > 1
  grdflag = true;
end

% Upper and Lower Locations Structure
heslocs = probinfo.adigator.endphesloc;

hesoutput  = struct('objectivehes',[]);
if grdflag
  grdoutput = struct('objectivegrd',[]);
end
% Objective
objective = output.objective;
if isfield(objective,'dvdv_location')
  hes = objective.dvdv;
  upperloc = heslocs.objectiveupper;
  lowerloc = heslocs.objectivelower;
  hes(upperloc) = 0.5.*(hes(upperloc)+hes(lowerloc));
  hes(lowerloc) = [];
  hesoutput.objectivehes = hes.';
end
if grdflag && isfield(objective,'dv_location')
  grdoutput.objectivegrd = objective.dv.';
end
% Events
if isfield(output,'eventgroup')
  eventgrouphes = struct('eventhes',cell(size(output.eventgroup)));
  if grdflag
    eventgroupgrd = struct('eventgrd',cell(size(output.eventgroup)));
  end
  for g = 1:numel(output.eventgroup)
    event = output.eventgroup(g).event;
    if isstruct(event)
      if isfield(event,'dvdv_location')
        hes = event.dvdv;
        upperloc = heslocs.eventgroup(g).eventupper;
        lowerloc = heslocs.eventgroup(g).eventlower;
        hes(upperloc) = 0.5.*(hes(upperloc)+hes(lowerloc));
        hes(lowerloc) = [];
        eventgrouphes(g).eventhes = hes.';
      end
      if grdflag && isfield(event,'dv_location')
        eventgroupgrd(g).eventgrd = event.dv.';
      end
    end
  end
  hesoutput.eventgroup = eventgrouphes;
  if grdflag
    grdoutput.eventgroup = eventgroupgrd;
  end
end
end