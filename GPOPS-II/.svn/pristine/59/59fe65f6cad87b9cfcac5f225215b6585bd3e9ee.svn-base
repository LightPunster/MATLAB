function [grdoutput,funoutput] = gpopsAdigatorContGrd(input,probinfo)
% ADiGator wrapper for Continuous Gradient
% Copyright 2011-2014 Matthew J. Weinstein and Anil V. Rao
% Distributed under the GNU General Public License version 3.0

% ----------------------------------------------------------------------- %
%                            Restructure Inputs                           %
% ----------------------------------------------------------------------- %
numphase = length(input.phase);
for phasecount = 1:numphase
  % State
  if isfield(input.phase(phasecount),'state')
    x = input.phase(phasecount).state;
    input.phase(phasecount).state   = struct('f',x,'dV',ones(size(x)));
  end
  % Control
  if isfield(input.phase(phasecount),'control')
    u = input.phase(phasecount).control;
    input.phase(phasecount).control = struct('f',u,'dV',ones(size(u)));
  end
  % Time Endpoints
  t = input.phase(phasecount).time;
  input.phase(phasecount).time      = struct('f',t,'dV',ones(size(t)));
  % Parameter
  if isfield(input.phase(phasecount),'parameter')
    par = input.phase(phasecount).parameter;
    input.phase(phasecount).parameter = struct('f',par,'dV',ones(size(par)));
  end
end

% ----------------------------------------------------------------------- %
%                          Call Derivative File                           %
% ----------------------------------------------------------------------- %
output = feval(probinfo.adigator.contgrd,input);

% ----------------------------------------------------------------------- %
%                            Restructure Outputs                          %
% ----------------------------------------------------------------------- %
dynamicsflag = false;
pathflag = false;
integrandflag = false;
funflag = false;
if isfield(output,'dynamics')
  dynamicsflag = true;
  grdoutput(numphase).dynamicsgrd = [];
end
if isfield(output,'path')
  pathflag = true;
  grdoutput(numphase).pathgrd = [];
end
if isfield(output,'integrand')
  integrandflag = true;
  grdoutput(numphase).integrandgrd = [];
end

if nargout > 1
  funflag = true;
  if dynamicsflag
    funoutput(numphase).dynamics = [];
  end
  if pathflag
    funoutput(numphase).path = [];
  end
  if integrandflag
    funoutput(numphase).integrand = [];
  end
end

for phasecount = 1:numphase;
  % Dynamics
  if dynamicsflag
    dynamics = output(phasecount).dynamics;
    if isstruct(dynamics)
      if isfield(dynamics,'dV_location')
        grdoutput(phasecount).dynamicsgrd = dynamics.dV;
      end
      if funflag
        funoutput(phasecount).dynamics = dynamics.f;
      end
    end
  end
  % Path
  if pathflag
    path = output(phasecount).path;
    if isstruct(path)
      if isfield(path,'dV_location')
        grdoutput(phasecount).pathgrd = path.dV;
      end
      if funflag
        funoutput(phasecount).path = path.f;
      end
    end
  end
  % Integrand
  if integrandflag
    integrand = output(phasecount).integrand;
    if isstruct(integrand)
      if isfield(integrand,'dV_location')
        grdoutput(phasecount).integrandgrd = integrand.dV;
      end
      if funflag
        funoutput(phasecount).integrand = integrand.f;
      end
    end
  end
end