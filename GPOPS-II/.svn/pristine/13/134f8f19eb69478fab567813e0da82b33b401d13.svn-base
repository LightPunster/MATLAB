function [numnodes, collocation] = gpopsPointsWeightsRPMI(currentmesh)

% gpopsPointsWeightsRPMI
% this function finds the points, quadrature weights, integration matrix
% and intial value matrix for the Segmented Radau Pseudospectral Method
% E and F are stored as sparsely
% (row, colunm, value)

% the first column of s are the collocation points for entire domain
% the second column of s are the LGR points, where each segment is on the
% domain [-1, 1) (the second column is used for interpulation only)

% s, w second column is values on [-1,1)
% E 4 column is values for [-1,1)

% get number of phases
numphase = size(currentmesh,2);

% preallocate fractionMat, collocation points, weights and diff matrix for
% each phase
numnodes = zeros(1,numphase);
collocation(numphase).fractionMat = [];
collocation(numphase).s = [];
collocation(numphase).w = [];
collocation(numphase).E = [];
collocation(numphase).Emat = [];
collocation(numphase).F = [];

% find LGR points, weights, and differentation matrix for each phase
for phasecount = 1:numphase;
  % get currentmesh information
  colpoints = currentmesh(phasecount).colpoints;
  fraction = currentmesh(phasecount).fraction;
  sumcolpoints = sum(colpoints);
  cumsumfraction = [0, cumsum(fraction)];
  cumsumcolpoints = [0, cumsum(colpoints)];
  cumsumcolpointssq = [0, cumsum(colpoints.^2)];
  
  % number of segments
  numseg = length(colpoints);
  
  % preallocate fractionvect, s, E, F for each phase
  fractionvect = zeros(sumcolpoints,1);
  s = zeros(sumcolpoints,2);
  w = zeros(sumcolpoints,2);
  E = zeros(sum(colpoints.^2),4);
  F = zeros(sumcolpoints,3);
  for segcount = 1:numseg;
    % assignment index
    sindex = (1:colpoints(segcount)) + cumsumcolpoints(segcount);
    Eindex = (1:(colpoints(segcount)^2)) + cumsumcolpointssq(segcount);
    
    % get LGR points, integration matrix, and initial value matrix for segment
    [tau, weights, Eseg, Fseg] = PointsWeightsLGRI(colpoints(segcount));
    
    % fraction vector for segment
    fractionvect(sindex,1) = fraction(segcount);
    
    % points for segment
    s(sindex,1) = (tau + 1).*fraction(segcount) + 2.*cumsumfraction(segcount) - 1;
    s(sindex,2) = tau;
    
    % weights for segment
    w(sindex,1) = weights.*fraction(segcount);
    w(sindex,2) = weights;
    
    % integration matrix for segment
    E(Eindex,1:2) = Eseg(:,1:2) + cumsumcolpoints(segcount);
    E(Eindex,3) = Eseg(:,3).*fraction(segcount);
    E(Eindex,4) = Eseg(:,3);
    
    % initial value matrix for segment
    F(sindex,1:2) = Fseg(:,1:2) + cumsumcolpoints(segcount);
    F(sindex,3) = Fseg(:,3);
  end
  numnodes(phasecount) = sumcolpoints;
  fracindex = 1:sumcolpoints;
  collocation(phasecount).fractionMat = sparse(fracindex,fracindex,fractionvect,sumcolpoints,sumcolpoints);
  collocation(phasecount).s = s;
  collocation(phasecount).w = w;
  collocation(phasecount).E = E;
  collocation(phasecount).Emat = sparse(E(:,1), E(:,2), E(:,4), sumcolpoints, sumcolpoints);
  collocation(phasecount).F = F;
  collocation(phasecount).dtdt0 = (1-s(:,1))/2;
  collocation(phasecount).dtdtf = (1+s(:,1))/2;
end

end

function [tau, weights, E, F] = PointsWeightsLGRI(N)

% gpopsPointsWeightsLGRI
% this function finds the N Legendre-Gauss-Radau points, quadrature weights
% the LGR integration matrix E
% and the initial value matrix F
% E and F are stored as sparsely
% (row, colunm, value)

% initial guess for LGR nodes
Nm1 = N-1;
tau = -cos(2*pi*(0:Nm1)/(2*Nm1+1))';

% the Legendre Vandermonde matrix
P = zeros(N,N+1);
xold = 2;

% Newton Raphson method
Nindex = 2:N;
while max(abs(tau-xold))>eps
  xold = tau;
  P(1,:) = (-1).^(0:N);
  P(Nindex,1) = 1;
  P(Nindex,2) = tau(Nindex);
  for k = 2:N
    P(Nindex,k+1) = ( (2*k-1)*tau(Nindex).*P(Nindex,k)-(k-1)*P(Nindex,k-1) )/k;
  end
  tau(Nindex) = xold(Nindex)-((1-xold(Nindex))/N).*(P(Nindex,N)+P(Nindex,N+1))./(P(Nindex,N)-P(Nindex,N+1));
end

% the Legendre-Gauss-Radau Vandermonde
P = P(1:N,1:N);

% compute the weights
weights = zeros(N,1);
weights(1) = 2/N^2;
weights(Nindex) = (1-tau(Nindex))./(N*P(Nindex,N)).^2;

% compute differentiation matrix
xxPlusEnd = [tau; 1];
M = length(xxPlusEnd);
M1 = M+1;
M2 = M*M;

% compute the barycentric weights
Y = repmat(xxPlusEnd,1,M);
Ydiff = Y - Y'+eye(M);

WW = repmat(1./prod(Ydiff,2),1,M);
D = WW./(WW'.*Ydiff);

D(1:M1:M2) = 1-sum(D);

% full differentiation matrix
D = -D';
D = D(1:N,:);

% find integration matrix E
Emat = inv(D(:,2:N+1));

% find Ediag and Eoffdiag as a sparse triplet
% (row, colunm, value)
E = zeros(N.*N,3);

% seperate diagnal from off diagnal
index = 1:N;
for rowcount = 1:N;
  E(index,1) = rowcount.*ones(N,1);
  E(index,2) = (1:N)';
  E(index,3) = Emat(rowcount,:)';
  index = index + N;
end

% initial value matrix
F = [(1:N)', ones(N,1), ones(N,1)];

end