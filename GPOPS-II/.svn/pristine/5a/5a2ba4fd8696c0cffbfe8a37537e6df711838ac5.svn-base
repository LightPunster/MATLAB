function grdoutput = gpopsAdigatorEndpGrdLoc(input,probinfo)
% ADiGator wrapper for Endpoint Gradient Locations
% Copyright 2011-2014 Matthew J. Weinstein and Anil V. Rao
% Distributed under the GNU General Public License version 3.0

% ----------------------------------------------------------------------- %
%                            Restructure Inputs                           %
% ----------------------------------------------------------------------- %
numphase = length(input.phase);
for phasecount = 1:numphase
  % State Endpoints
  if isfield(input.phase(phasecount),'initialstate');
    x0 = input.phase(phasecount).initialstate;
    xf = input.phase(phasecount).finalstate;
    input.phase(phasecount).initialstate = struct('f',x0,'dv',ones(length(x0),1));
    input.phase(phasecount).finalstate   = struct('f',xf,'dv',ones(length(xf),1));
  end
  % Time Endpoints
  t0 = input.phase(phasecount).initialtime;
  tf = input.phase(phasecount).finaltime;
  input.phase(phasecount).initialtime    = struct('f',t0,'dv',1);
  input.phase(phasecount).finaltime      = struct('f',tf,'dv',1);
  % Integral
  if isfield(input.phase(phasecount),'integral')
    q = input.phase(phasecount).integral;
    input.phase(phasecount).integral     = struct('f',q, 'dv',ones(length(q),1));
  end
end

% Parameter
if isfield(input,'parameter')
  par = input.parameter;
  input.parameter = struct('f',par,'dv',ones(length(par),1));
end

% ----------------------------------------------------------------------- %
%                          Call Derivative File                           %
% ----------------------------------------------------------------------- %
output = feval(probinfo.adigator.endpgrd,input);

% ----------------------------------------------------------------------- %
%                            Restructure Outputs                          %
% ----------------------------------------------------------------------- %
grdoutput  = struct('objectivegrdloc',[]);
% Objective
objective = output.objective;
if isfield(objective,'dv_location')
  grdoutput.objectivegrdloc = objective.dv_location.';
end

% Events
if isfield(output,'eventgroup')
  eventgroupgrd = ...
    struct('eventgrdloc',cell(size(output.eventgroup)));
  for g = 1:numel(output.eventgroup)
    event = output.eventgroup(g).event;
    if isstruct(event)
      if isfield(event,'dv_location')
        if size(event.dv_location,2) == 1
          event.dv_location = ...
            [ones(size(event.dv_location,1),1), event.dv_location];
        end
        eventgroupgrd(g).eventgrdloc = event.dv_location.';
      end
    end
    if isempty(eventgroupgrd(g).eventgrdloc)
      eventgroupgrd(g).eventgrdloc = zeros(2,0);
    end
  end
  grdoutput.eventgroup = eventgroupgrd;
end