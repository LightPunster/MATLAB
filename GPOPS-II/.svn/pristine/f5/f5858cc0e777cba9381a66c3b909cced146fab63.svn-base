function [solution, nlpmult] = gpopsSolutionRPMD(Zsol, Fmul, probinfo, nlp, varargin) %zl, zu, xmul, Fstate, xstate

% gpopsSolutionRPMD
% this function outputs the solution of the optimal control problem from
% the solution of the NLP

% get OCP info
numphase = probinfo.numphase;
numstate = probinfo.numstate;
numcontrol = probinfo.numcontrol;
numintegral = probinfo.numintegral;
numparameter = probinfo.numparameter;
numpath = probinfo.numpath;
numeventgroup = probinfo.numeventgroup;

% get variable inputs
if nargin == 6
    zl = varargin{1};
    zu = varargin{2};
elseif nargin == 7
    xmul = varargin{1};
    Fstate = varargin{2};
    xstate = varargin{3};
end

% get nlp multipliers
if probinfo.warmStartFlag && strcmp(nlp, 'ipopt')
    ocpmult = gpopsMultipliersRPMD(Fmul, probinfo, zl, zu);
elseif probinfo.warmStartFlag && strcmp(nlp, 'snopt')
    [ocpmult, ocpbasis] = gpopsMultipliersRPMD(Fmul, probinfo, xmul, Fstate, xstate);
else
    ocpmult = gpopsMultipliersRPMD(Fmul, probinfo);
end

% get number of nodes
numnodes = probinfo.numnodes;

% preallocate phase
phase(numphase).time = [];
phase(numphase).state = [];
if sum(numcontrol,2) ~= 0;
  phase(numphase).control = [];
end
if sum(numintegral,2) ~= 0;
  phase(numphase).integral = [];
end
phase(numphase).costate = [];
phase(numphase).timeRadau = [];
if sum(numcontrol,2) ~= 0;
  phase(numphase).controlRadau = [];
end
if sum(numpath,2) ~= 0;
  phase(numphase).pathmultipliers = [];
end
if sum(numintegral,2) ~= 0;
  phase(numphase).integralmultipliers = [];
end

% warm start bound and duration multipliers
if probinfo.warmStartFlag
  phase(numphase).durationmultipliers = [];
  phase(numphase).boundmultipliers = []; 
  for phasecount = 1:numphase;
    phase(phasecount).durationmultipliers = ocpmult.contmult(phasecount).durationmult;
    phase(phasecount).boundmultipliers = ocpmult.boundmult.phase(phasecount);
  end  
  if nargin == 7
      basis.phase(numphase).durationbasis = [];
      basis.phase(numphase).boundbasis = [];
      for phasecount = 1:numphase;
        basis.phase(phasecount).durationbasis = ocpbasis.contbasis(phasecount).durationbasis;
        basis.phase(phasecount).boundbasis = ocpbasis.boundbasis.phase(phasecount);
      end 
  end  
end

% preallocate nlpmultphase
nlpmultphase(numphase).defectmultipliers = [];
if sum(numpath,2) ~= 0;
  nlpmultphase(numphase).pathmultipliers = [];
end
if sum(numintegral,2) ~= 0;
  nlpmultphase(numphase).integralmultipliers = [];
end

% get parameters
if numparameter ~= 0;
  parameter = Zsol(probinfo.nlpparametermap)';
end

% get variables for phases
for phasecount = 1:numphase;
  % get OCP info for each phase
  numstatep = numstate(phasecount);
  numcontrolp = numcontrol(phasecount);
  numintegralp = numintegral(phasecount);
  numpathp = numpath(phasecount);
  numnodesp = numnodes(phasecount);
  
  % get nlp map and collocation for phase
  phasenlpmap = probinfo.nlpcontmap(phasecount);
  meshp = probinfo.collocation(phasecount);
  
  % get OCP time for phase
  s = probinfo.collocation(phasecount).s(:,1);
  sp1 = [s; 1];
  t0 = Zsol(phasenlpmap.timemap(1));
  tf = Zsol(phasenlpmap.timemap(2));
  time = (sp1 + 1).*(tf - t0)./2 + t0;
  phase(phasecount).time = time;
  phase(phasecount).timeRadau = time(1:end-1);
  
  % get OCP state for phase
  state = Zsol(phasenlpmap.statemap(1,1):phasenlpmap.statemap(2,numstatep));
  phase(phasecount).state = reshape(state,numnodesp+1,numstatep);
  
  % get OCP control for phase
  if numcontrolp ~= 0;
    controlRadau = Zsol(phasenlpmap.controlmap(1,1):phasenlpmap.controlmap(2,numcontrolp));
    controlRadau = reshape(controlRadau,numnodesp,numcontrolp);
    controlextrap = interp1(s,controlRadau,1,'pchip','extrap');
    phase(phasecount).control = [controlRadau; controlextrap];
    phase(phasecount).controlRadau = controlRadau;
  end
  
  % get OCP integral for phase
  if numintegralp ~= 0;
    phase(phasecount).integral = Zsol(phasenlpmap.integralvarmap)';
    phase(phasecount).integralmultipliers = ocpmult.contmult(phasecount).integralmult;
    nlpmultphase(phasecount).integralmultipliers = ocpmult.contmult(phasecount).integralmult;
    if nargin == 7
       basis.phase(phasecount).integralbasis = ocpbasis.contbasis(phasecount).integralbasis; 
    end
  end
  
  % get OCP costate for phase
  defectmult = ocpmult.contmult(phasecount).defectmult;
  nlpmultphase(phasecount).defectmultipliers = defectmult;
  costate = zeros(numnodesp+1,numstatep);
  D = sparse(meshp.Doffdiag(:,1), meshp.Doffdiag(:,2), meshp.Doffdiag(:,4), numnodesp, numnodesp+1);
  for statecount = 1:numstatep;
    costate(:,statecount) = [defectmult(:,statecount)./meshp.w(:,2); full(D(:,numnodesp+1)'*defectmult(:,statecount))];
  end
  phase(phasecount).costate = costate;
  if nargin == 7
       basis.phase(phasecount).defectbasis = ocpbasis.contbasis(phasecount).defectbasis; 
  end
  
  % compute pathmultiplers
  if numpathp ~= 0;
    nlpmultphase(phasecount).pathmultipliers = ocpmult.contmult(phasecount).pathmult;
    if tf-t0 ~= 0;
      phase(phasecount).pathmultipliers = ocpmult.contmult(phasecount).pathmult;
      for pathcount = 1:numpathp;
        phase(phasecount).pathmultipliers(:,pathcount) = 2/(tf-t0).*phase(phasecount).pathmultipliers(:,pathcount)./meshp.w(:,1);
      end
      
      if nargin == 7
       basis.phase(phasecount).pathbasis = ocpbasis.contbasis(phasecount).pathbasis; 
      end
      
    else
      if probinfo.displaylevel > 0;
        disp('path multipliers can not be computed');
      end
    end
  end
  
  % warm start bound multipliers adjustment
  if probinfo.warmStartFlag && strcmp(nlp, 'ipopt')
    % adjust state bound multipliers
    for statecount = 1:numstatep;
      % lower bound
      phase(phasecount).boundmultipliers.statemult.l(2:end-1,statecount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.statemult.l(2:end-1,statecount)./meshp.w(2:end,2);
      % upper bound
      phase(phasecount).boundmultipliers.statemult.u(2:end-1,statecount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.statemult.u(2:end-1,statecount)./meshp.w(2:end,2);
    end
        
    % adjust control bound multipliers
    if numcontrolp ~= 0
      for controlcount = 1:numcontrolp;
        % lower bound
        phase(phasecount).boundmultipliers.controlmult.l(:,controlcount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.controlmult.l(:,controlcount)./meshp.w(:,2);
        % upper bound
        phase(phasecount).boundmultipliers.controlmult.u(:,controlcount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.controlmult.u(:,controlcount)./meshp.w(:,2);
      end
    end
    
  elseif probinfo.warmStartFlag && strcmp(nlp, 'snopt')
    % adjust state bound multipliers
    for statecount = 1:numstatep;
      % bound
      phase(phasecount).boundmultipliers.statemult(2:end-1,statecount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.statemult(2:end-1,statecount)./meshp.w(2:end,2);
    end
        
    % adjust control bound multipliers
    if numcontrolp ~= 0
      for controlcount = 1:numcontrolp;
        % bound
        phase(phasecount).boundmultipliers.controlmult(:,controlcount) = ...
          2/(tf-t0).*phase(phasecount).boundmultipliers.controlmult(:,controlcount)./meshp.w(:,2);
      end
    end
  end
end

% add variables for all phases to solution
solution.phase = phase;
if nargin == 7
    solution.basis = basis;
end

% add variables for all phases to nlpmult
nlpmult.phase = nlpmultphase;

% get endpinput for parameter guess
if numparameter ~= 0;
  solution.parameter = parameter;
  if probinfo.warmStartFlag 
    % static parameter multipliers
    solution.staticparametermultipliers = ocpmult.boundmult.parametermult;
    nlpmult.staticparametermultipliers = ocpmult.boundmult.parametermult;
    if strcmp(nlp, 'snopt')
        solution.staticparameterbasis = ocpbasis.boundbasis.parameterbasis;
    end
  end
end

% event multipliers
if numeventgroup ~= 0;
  solution.eventgroupmultipliers = ocpmult.eventmultgroup;
  nlpmult.eventgroupmultipliers = ocpmult.eventmultgroup;
  if probinfo.warmStartFlag && strcmp(nlp, 'snopt')
      solution.eventgroupbasis = ocpbasis.eventbasisgroup;
  end
end

end
